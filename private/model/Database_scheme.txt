user-public -> locationa -> locationb -> location c... -> posts -> post1 -> date -> text
                                                                           -> likes
                                                                           -> relevance
                        -> text
                        -> location
    -> info
    -> friends
    -> picture

user-friends -> locationa -> locationb -> location c... -> posts -> post -> date -> text
                                                                                  -> likes
                                                                                  -> relevance


location -> date
                


locationa -> locationb0                     -> locationc0
        -> locationb1
        -> locationb2
        ->locationbdate =>pointertopost


locations - public
                                            ->likes -> table of user ids
                                            ->comments -> table of comments
                                            ->number of posts
                                            ->userid (use this to delete pointer from user when expired)
                                            ->pointer to it (if sharing posts feature)
                                            ->expiration_date (if queried beyond date, delete it and all pointers to it)
0 -> 00 -> 000 -> 0000 ... -> posts -> post -> id = 0000..._A_I_Num (largest A_I_Num is newest/algorithm to switch if liked alot)
               -> 0001
               -> 0002
        -> 001 -> 0010
               -> 0011
               -> 0012
        -> 002 -> 0020
               -> 0021
               -> 0022
  -> 01 -> 010 -> 0100
               -> 0101
               -> 0102
        -> 011 -> 0110
               -> 0111
               -> 0112
        -> 012 -> 0120
               -> 0121
               -> 0122
  -> 02 -> 020 -> 0200
               -> 0201
               -> 0202
        -> 021 -> 0210
               -> 0211
               -> 0212
        -> 022 -> 0220
               -> 0221
               -> 0222
        -> posts -> post -> id = 00_A_I_Num
                         -> Same as above
        -> number of posts
        Query in 00 takes top posts in each of 000,001,002 (not 0000 or below) by number of posts. Ex: if 000 has 5 posts but 001 has 20 posts, top 1 post will be taken from 000 and top 4 from 001



userid -> posts -> public -> pointer to last post public
                           -> ...
                           -> pointer to most recent public post ex: 0103123_35234
                -> friends -> pointer to last post marked friends
                           -> ...
                           -> pointer to most recent post marked friends
                -> private -> pointer to last post marked private
                           -> ...
                           -> pointer to most recent post marked private

users -> userid -> posts
                -> username -> userid
                -> email -> userid
                -> password
                -> firstname
                -> lastname
                -> phone (added later once phone numbers are verified) -> userid
since email and phone and username are all unique, make then tables, so you can quickly find userid
OR ---- have a second nosql / dynamoDB of username, email, phone to retrive userid


users stored in a location - friends access friends together, they tend to live near each other

A shard has a single collection, which uses geo to find nearby posts
Scaling -> Beginning, all information is in a single shard -> everything is in a single collection
        -> expanding to two shards - split into two areas by geo, each shard has a single collection, one of one area, the other of the other area, a third collection is placed in overhead that stores the top posts of both collections
        -> expanding to four shard - split both shards in two by geo, each shard single collection each of a fourth of the total area



 Shard 1
    Massachusetts
    -all posts in Mass
 Shard 2
    Maine
 Shard 3
    NH
 Shard 4
    Vermont
 Shard 5
    Rhode Island
 Shard 6
    Conneticut
 In one of shard 1-6 has New England collection which holds the top 200 posts of shard 1-6
 Shards 7-15 has New York - DC region
 Shard 16-20 has Virginia - South Carolina - Tennessee 
 
 In one of shares 1-20 has East Coat collections which holds top 200 posts of New englad, NY-DC region, and Virginia, SC, TN collections

 One collection for world. When it fills up, divide it into two collections by geo and create a third collection for top posts of both of those collections, when one of those fills up, divide that collection into two collections by geo
Corner case - person wants data that exists in two shards, (not real example (since computer auto divides): person lives near border of MA and NH and wants local data
    Solution - each shard holds boundary gps coordinates and knows id of shard to each of its sides

Friends' posts - Two cases:
    Case 1: small region (under 50 miles radius, can be decreased when busier):
        

Search through friend list. For each friend, find posts where geo matches (~1000 queries)

-Save locations of posts of each user in an array in the user document of the users collections.  This enables the query to find friends with posts near them
Denormalization - all posts are saved in user database and in location database


THIS WORKS --------

db.users.insert({name:"Sam5", post3:[{loc : { type : "Point",coordinates : [ 40.0000000 , 5 ]}},{loc: {type: "Point",coordinates:[60,60]}}]})
db.users.insert({name:"Sam6", post3:[{loc : { type : "Point",coordinates : [ 40.0000001 , 5 ]}},{loc: {type: "Point",coordinates:[61,60]}}]})
db.users.ensureIndex({"post3.loc":"2dsphere"})

db.users.find({"post3.loc":{$near:{$geometry:{type:"Point",coordinates:[40,5]}},$maxDistance:10000}}) ---THIS WORKS

